<?php

namespace SPGame\Game\Services;

use SPGame\Core\Logger;
use SPGame\Core\Message;
use SPGame\Core\WSocket;

use SPGame\Game\Repositories\Accounts;
use SPGame\Game\Repositories\Builds;
use SPGame\Game\Repositories\Techs;

use SPGame\Game\Repositories\Planets;
use SPGame\Game\Repositories\Users;
use SPGame\Game\Repositories\Config;
use SPGame\Game\Repositories\Resources;

use SPGame\Game\Repositories\Queues;

use SPGame\Game\Repositories\Vars;

use SPGame\Game\Repositories\PlayerQueue;

use Swoole\Timer;

class EventLoop
{
    protected Logger $logger;

    private array $tasks = [];

    public function __construct()
    {
        $this->logger = Logger::getInstance();
    }


    public function register(callable $callback, int $intervalMs): void
    {
        $this->tasks[] = [
            'interval' => $intervalMs,
            'callback' => $callback
        ];
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ Swoole Timer
     * @param int $interval –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    public function start(): void
    {

        foreach ($this->tasks as $task) {
            $this->logger->info("Event loop started with interval {$task['interval']}ms");
            Timer::tick($task['interval'], $task['callback']);
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    public function process(): void
    {
        $StatTimeTick = microtime(true);

        foreach (Accounts::getOnline() as $Account) {

            $sendMsg = false;

            $AccountData = new AccountData($Account['id']);

            if (!$AccountData['User']) continue;

            // üß© –ü—Ä–∏–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–≥—Ä–æ–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
            $sendMsg = $this->processPlayerStateAtTime($StatTimeTick, $AccountData);

            $AccountData->save();

            // ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ PlayerQueue (–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏, –æ—Ç–º–µ–Ω—ã –∏ —Ç.–¥.)
            $sendMsg = ($this->processPlayerEvents($Account['id'])) ? true : $sendMsg;

            if ($sendMsg) {
                self::sendActualData($Account['id']);
            }
        }
        // –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        $duration = round(microtime(true) - $StatTimeTick, 3);
        $this->logger->debug("Event process time: {$duration}s");
    }



    /**
     * –ü—Ä–∏–≤–æ–¥–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏ –µ–≥–æ –æ—á–µ—Ä–µ–¥–µ–π –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–æ–º–µ–Ω—Ç—É –≤—Ä–µ–º–µ–Ω–∏.
     */
    protected function processPlayerStateAtTime(float $targetTime, AccountData &$AccountData): bool
    {
        $sendMsg = false;
        $userId = $AccountData['User']['id'];


        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑ (–Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)
        //$AccountData['Techs'] = Techs::findById($userId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã –∏–≥—Ä–æ–∫–∞ –∏ –≥–æ—Ç–æ–≤–∏–º –∫–µ—à PlanetsData
        /*$Planets = Planets::getAllPlanets($userId);
        $PlanetsData = [];
        foreach ($Planets as $pid => $Planet) {
            // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Resources::get() –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π $tmpAccountData
            $tmpAccountData = $AccountData;
            $tmpAccountData['Planet'] = $Planet;
            $tmpAccountData['Builds'] = Builds::findById($pid);

            // Now resources are built using Planet + Builds + Techs + User + Account
            $PlanetsData[$pid] = [
                'Planet'    => $Planet,
                'Builds'    => $tmpAccountData['Builds'],
                'Resources' => Resources::get($tmpAccountData)
            ];
        }*/

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ end_time) –¥–æ targetTime
        $sendMsg = $this->processAccountQueues($targetTime, $AccountData) ? true : $sendMsg;


        // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π ‚Äî –¥–æ–≤–æ–¥–∏–º —Ä–µ—Å—É—Ä—Å—ã –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –¥–æ targetTime
        $Planets = Planets::getAllPlanets($userId);
        foreach ($Planets as $pid => $Planet) {
            $AccountData['WorkPlanet'] = $Planet['id'];
            Resources::processResources($targetTime, $AccountData);
        }
        /*foreach ($PlanetsData as $pid => $pd) {
            $tmp = $AccountData;
            $tmp['Planet'] = $pd['Planet'];
            $tmp['Builds'] = $pd['Builds'];
            $tmp['Resources'] = $pd['Resources'];
        */
        // processResources –æ–∂–∏–¥–∞–µ—Ç array &$AccountData (–æ–Ω –æ–±–Ω–æ–≤–∏—Ç $tmp['Resources'] –∏ $tmp['Planet']['update_time'])

        /*
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î
            Resources::updateByPlanetId($pid, $tmp['Resources']);
            Planets::update($tmp['Planet']);
            Builds::update($tmp['Builds']);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –µ—â—ë —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PlanetsData –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ
            $PlanetsData[$pid]['Planet'] = $tmp['Planet'];
            $PlanetsData[$pid]['Resources'] = $tmp['Resources'];
        }

        Techs::update($AccountData['Techs']);
        Users::update($AccountData['User']);*/

        return $sendMsg;
    }

    protected function processAccountQueues(float $StatTimeTick, AccountData &$AccountData): bool
    {
        $sendMsg = false;
        $maxIterations = 500; // safety

        while ($maxIterations-- > 0) {
            // –ù–ê–î–û: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user
            $Queue = Queues::getActiveMinEndTimeByUser($AccountData['User']['id']);
            if (!$Queue) break;
            if ($Queue['end_time'] > $StatTimeTick) break;

            $this->logger->info(
                sprintf(
                    "Queue complete: id=%d, type=%s, planet=%d, end=%.3f <= %.3f",
                    $Queue['id'],
                    $Queue['type'] ?? '?',
                    $Queue['planet_id'],
                    $Queue['end_time'],
                    $StatTimeTick
                )
            );

            $planetId = $Queue['planet_id'];
            /*
            // –ï—Å–ª–∏ –¥–ª—è –ø–ª–∞–Ω–µ—Ç—ã –µ—â—ë –Ω–µ—Ç –∫–µ—à–∞ ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –µ–≥–æ (–Ω–µ –∑–∞–±—ã–≤ Techs)
            if (!isset($PlanetsData[$planetId])) {
                $Planet = Planets::findById($planetId);
                $Builds = Builds::findById($planetId);

                $tmpAccountData = $AccountData;
                $tmpAccountData['Planet'] = $Planet;
                $tmpAccountData['Builds'] = $Builds;
                // Techs —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ $AccountData (—Å–º. –≤—ã–∑–æ–≤ –≤—ã—à–µ)
                $ResourcesForPlanet = Resources::get($tmpAccountData);

                $PlanetsData[$planetId] = [
                    'Planet'    => $Planet,
                    'Builds'    => $Builds,
                    'Resources' => $ResourcesForPlanet
                ];
            }

            // –°–æ–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é AccountData –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ (—Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–µ—à)
            $QueueAccountData = $AccountData;
            $QueueAccountData['Planet'] = $PlanetsData[$planetId]['Planet'];
            $QueueAccountData['Builds'] = $PlanetsData[$planetId]['Builds'];
            $QueueAccountData['Resources'] = $PlanetsData[$planetId]['Resources'];
            */

            $AccountData['WorkPlanet'] = $planetId;
            // 1) –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–ª–∞–Ω–µ—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
            Resources::processResources($Queue['end_time'], $AccountData);

            // 2) –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (–≤–∞–∂–Ω–æ: CompleteQueue –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
            // –•–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: –≤–Ω—É—Ç—Ä–∏ CompleteQueue –≤—ã–ø–æ–ª–Ω—è—Ç—å DB-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é,
            // —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –∏ –ø–µ—Ä–µ—Å—á–µ—Ç—ã –±—ã–ª–∏ –∞—Ç–æ–º–∞—Ä–Ω—ã–º–∏.
            QueuesServices::CompleteQueue($Queue['id'], $AccountData, $Queue['end_time']);

            $AccountData->save();

            /*
            // 3) –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–µ—à
            $AccountData['Techs'] = $QueueAccountData['Techs'];
            $AccountData['User'] = $QueueAccountData['User'];

            $PlanetsData[$planetId]['Planet'] = $QueueAccountData['Planet'];
            $PlanetsData[$planetId]['Builds'] = $QueueAccountData['Builds'];
            $PlanetsData[$planetId]['Resources'] = $QueueAccountData['Resources'];

            // 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î (—á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –≤—Å—ë –±—ã–ª–æ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ)
            Resources::updateByPlanetId($planetId, $QueueAccountData['Resources']);
            Planets::update($QueueAccountData['Planet']);
            Builds::update($QueueAccountData['Builds']);
            Techs::update($AccountData['Techs']);
            Users::update($AccountData['User']);
            */
            // 5) –†–µ—à–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫—É (–µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –∏–ª–∏ —Ç–µ—Ö–∏)
            if (
                $planetId == $AccountData['User']['current_planet'] ||
                ($Queue['type'] == QueuesServices::TECHS && $Queue['user_id'] == $AccountData['User']['id'])
            ) {
                $sendMsg = true;
            }

            // –ü–æ—Å–ª–µ CompleteQueue –≤–æ–∑–º–æ–∂–µ–Ω ReCalc –¥—Ä—É–≥–∏—Ö –æ—á–µ—Ä–µ–¥–µ–π => –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é earliest –æ—á–µ—Ä–µ–¥—å
        }

        if ($maxIterations <= 0) {
            $this->logger->warning("processAccountQueues: reached max iterations for user " . $AccountData['User']['id']);
        }

        return $sendMsg;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä–æ–∫–æ–≤
     */
    protected function processPlayerEvents(int $accountId): bool
    {

        $sendMsg  = false;
        $Queues = PlayerQueue::getByAccaunt($accountId) ?? [];

        foreach ($Queues as $Event) {

            $AccountData = new AccountData($Event['account_id']);
            $AccountData['WorkPlanet'] = $Event['planet_id'];

            /*
            $AccountData = [
                'Account'   => Accounts::findById($Event['account_id']),
                'User'      => Users::findById($Event['user_id']),
                'Planet'    => Planets::findById($Event['planet_id']),
                'Builds'    => Builds::findById($Event['planet_id']),
                'Techs'     => Techs::findById($Event['user_id'])
            ];
            $AccountData['Resources']   = Resources::get($AccountData);
            

            $PlanetsData = [];

            $PlanetsData[$Event['planet_id']]['Planet'] = &$AccountData['Planet'];
            $PlanetsData[$Event['planet_id']]['Builds'] = &$AccountData['Builds'];
            $PlanetsData[$Event['planet_id']]['Resources'] = &$AccountData['Resources'];
            */
            switch ($Event['action']) {
                case PlayerQueue::ActionQueueUpgarde:
                    QueuesServices::AddToQueue($Event['data']['Element'], $AccountData, $Event['added_at'], true);
                    $sendMsg  = true;
                    break;

                case PlayerQueue::ActionQueueDismantle:
                    QueuesServices::AddToQueue($Event['data']['Element'], $AccountData, $Event['added_at'], false);
                    $sendMsg  = true;
                    break;

                case PlayerQueue::ActionQueueCancel:
                    QueuesServices::CancelToQueue($Event['data']['QueueId'], $AccountData, $Event['added_at']);
                    $sendMsg  = true;
                    break;

                case PlayerQueue::ActionQueueReCalcTech:
                    QueuesServices::ReCalcTimeQueue(QueuesServices::TECHS, $AccountData, $Event['added_at']);
                    $sendMsg  = true;
                    break;
                case PlayerQueue::ActionSelectPlanet:
                    $AccountData['User']['current_planet'] = $Event['planet_id'];
                    $sendMsg  = true;
                    break;
                case PlayerQueue::ActionMessagesRead:
                    Notification::setReadMessages($Event['user_id'], $Event['data']['ReadId']);
                    $sendMsg  = true;
                    break;
                case PlayerQueue::ActionMessagesNew:
                    $sendMsg  = true;
                    break;
                    // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            }

            $AccountData->save();
            /*
            foreach ($PlanetsData as $pid => $pd) {
                Resources::updateByPlanetId($pid, $pd['Resources']);
                Planets::update($pd['Planet']);
                Builds::update($pd['Builds']);
            }*/

            /*Resources::updateByPlanetId($AccountData['Planet']['id'], $AccountData['Resources']);
            Planets::update($AccountData['Planet']);
            Builds::update($AccountData['Builds']);*/
            //Techs::update($AccountData['Techs']);
            //Users::update($AccountData['User']);

            Logger::getInstance()->info("ProcessPlayerEvents " . $Event['action']);

            PlayerQueue::delete($Event);
        }

        return $sendMsg;
        /*if ($sendMsg) {
            self::sendActualData($accountId);
        }*/
    }

    protected function sendActualData(int $accountId): void
    {
        $Account = Accounts::findById($accountId);
        if (!$Account) {
            $this->logger->warning("sendActualData: account not found", ['accountId' => $accountId]);
            return;
        }

        $frame = (int)$Account['frame'];
        if ($frame < 1) {
            $this->logger->warning("sendActualData: invalid frame for account", ['accountId' => $accountId, 'frame' => $frame]);
            return;
        }

        $ws = WSocket::getInstance();
        if (!$ws) {
            $this->logger->error("sendActualData: WebSocket instance not available", ['accountId' => $accountId]);
            return;
        }

        $response = new Message();
        $response->setMode($Account['mode']);
        $response->setAction("ActualData");

        //$this->logger->info("sendActualData: sending to account", ['accountId' => $accountId, 'mode' => $Account['mode'], 'frame' => $frame]);

        $pageBuilder = new \SPGame\Game\PageBuilder($response, $frame);
        $response = $pageBuilder->build($response);

        $ws->Send($frame, $response);
    }
}
